name: Release

on:
  push:
    tags:
      - v*
  workflow_dispatch: {}

permissions:
  contents: write
  id-token: write

jobs:
  make-draft-release:
    name: make draft release

    permissions: write-all

    runs-on: ubuntu-22.04
    timeout-minutes: 360

    env:
      ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
      ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Check if package version matches
        run: test "${GITHUB_REF_NAME}" = "v$(jq -r .version freelens/package.json)"

      - name: Create draft release
        run: |
          gh release create ${GITHUB_REF_NAME} \
            --draft \
            --title ${GITHUB_REF_NAME} \
            --generate-notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-app:
    name: build app

    needs:
      - make-draft-release

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            arch: x64
            concurrency: linux-amd64
          - os: windows-2022
            arch: x64
            concurrency: windows-amd64

    runs-on: ${{ matrix.os }}
    environment: signing

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref_name }}-${{ matrix.concurrency }}

    env:
      ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
      ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -q update
          sudo apt-get -q install -y --no-install-recommends \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: choco install yq --yes --no-progress

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Disable pre post scripts for pnpm
        shell: bash
        run: pnpm config set enablePrePostScripts false

      - name: Get pnpm cache directory
        shell: bash
        run: echo "pnpm_cache_dir=$(pnpm store path)" >> ${GITHUB_ENV}

      - name: Get Electron version
        shell: bash
        run: echo "electron_version=$(yq -r .importers.freelens.devDependencies.electron.version pnpm-lock.yaml | sed 's/(.*)//')"
          >> $GITHUB_ENV

      - name: Get Electron Builder version
        shell: bash
        run: echo "electron_builder_version=$(yq -r .importers.freelens.devDependencies.electron-builder.version pnpm-lock.yaml
          | sed 's/(.*)//')" >> $GITHUB_ENV

      - name: Use pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.pnpm_cache_dir }}
          key: ${{ matrix.os }}-${{ matrix.arch }}-node-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.arch }}-node-

      - name: Use Electron cache
        uses: actions/cache@v4
        with:
          path: ${{ env.ELECTRON_CACHE }}
          key: ${{ matrix.os }}-${{ matrix.arch }}-electron-${{ env.electron_version }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.arch }}-electron-

      - name: Use Electron Builder cache
        uses: actions/cache@v4
        with:
          path: ${{ env.ELECTRON_BUILDER_CACHE }}
          key: ${{ matrix.os }}-${{ matrix.arch }}-electron-builder-${{ env.electron_builder_version }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.arch }}-electron-builder-

      - name: Install pnpm dependencies
        id: install-pnpm
        shell: bash
        run: pnpm install --color=always --prefer-offline --frozen-lockfile
        continue-on-error: true

      - name: Install pnpm dependencies (retry)
        if: steps.install-pnpm.outcome == 'failure'
        shell: bash
        run: pnpm install --color=always --prefer-offline --frozen-lockfile

      - name: Build packages
        run: pnpm --color=always --stream build

      - name: Build extra resources
        id: build-resources
        run: pnpm --color=always build:resources
        continue-on-error: true

      - name: Build extra resources (retry)
        id: build-resources-2
        if: steps.build-resources.outcome == 'failure'
        run: pnpm --color=always build:resources
        continue-on-error: true

      - name: Build extra resources (retry 2)
        if: steps.build-resources-2.outcome == 'failure'
        run: pnpm --color=always build:resources

      - name: Build Electron app (Linux)
        if: runner.os == 'Linux'
        run: |
          pnpm --color=always build:app \
            deb \
            --${{ matrix.arch }}

      - name: Build Electron app (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          pnpm --color=always build:app \
            msi nsis \
            --${{ matrix.arch }}

      - name: Azure Trusted Signing (Windows)
        if: runner.os == 'Windows'
        uses: azure/trusted-signing-action@v0.5.9
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: ${{ vars.AZURE_ENDPOINT }}
          trusted-signing-account-name: ${{ vars.AZURE_CODE_SIGNING_NAME }}
          certificate-profile-name: ${{ vars.AZURE_CERT_PROFILE_NAME }}
          files-folder: ${{ github.workspace }}\freelens\dist
          files-folder-filter: exe,msi

      - name: Tweak binaries
        shell: bash
        run: |
          find . -name '*pty.node' -print0 | xargs -0 file
          rm -f freelens/dist/*.blockmap

      - name: Normalize filenames before upload
        shell: bash
        run: |
          perl << 'END'
          chdir "freelens/dist" or die $!; 
          my %arch = (x64 => "amd64", arm64 => "arm64");
          my $arch = $arch{$ENV{ARCH}};
          while (<Freelens*>) {
            my $src = $_;
            s/ Setup /-/;
            s/[ _]/-/g;
            if (/\.(dmg|exe|msi|pkg)$/ && !/-(amd64|arm64)\./) {
              s/\.(dmg|exe|msi|pkg)$/-$arch.$1/;
            }
            s/[.-](aarch64|arm64)/-arm64/;
            s/[.-](amd64|x86-64)/-amd64/;
            s/-(amd64|arm64).(dmg|pkg)$/-macos-$1.$2/;
            s/-(amd64|arm64).(AppImage|deb|flatpak|rpm|snap)$/-linux-$1.$2/;
            s/-(amd64|arm64).(exe|msi|)$/-windows-$1.$2/;
            my $dst = $_;
            if ($src ne $dst) {
              print "rename $src to $dst\n";
              rename $src, $dst or die $!;
            }
          }
          END
        env:
          ARCH: ${{ matrix.arch }}

      - name: Make checksums for binaries (Linux, Windows)
        if: runner.os == 'Linux' || runner.os == 'Windows'
        shell: bash
        run: |
          for f in freelens/dist/Freelens*.*; do
            pushd freelens/dist > /dev/null
            sha256sum $(basename $f) | tee $(basename $f).sha256
            popd > /dev/null
          done

      - name: List files before upload
        shell: bash
        run: |
          for f in freelens/dist/Freelens*.*; do
            echo "$(ls -l "$f")" "|" "$(file -b "$f")"
          done

      - name: Upload files
        shell: bash
        run: |
          gh release upload ${GITHUB_REF_NAME#sign/} freelens/dist/Freelens*.*
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-github-release:
    name: publish GitHub release

    needs:
      - make-draft-release
      - build-app

    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Publish GitHub release
        run: gh release edit ${GITHUB_REF_NAME} --draft=false
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}